#ifndef DESERIALIZE_{{ message.name.upper() }}_H_
#define DESERIALIZE_{{ message.name.upper() }}_H_

#include <stddef.h>
#include <stdint.h>
#include "common/common_types.h"
#include "common/serialize_utils.h"

{%- macro deserialize_field(field, var_name, buffer_name, offset_name) %}
{%- if field.is_string %}
    // String field: {{ field.name }}
    if ({{ offset_name }} + sizeof(uint32_t) > buffer_size) {
        return 0;
    }
    
    const uint32_t {{ field.name }}_len_with_null = deserialize_u32_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += sizeof(uint32_t);
    
    if ({{ field.name }}_len_with_null == 0) {
        {{ var_name }}->{{ field.name }}.data = {{ field.name }}_buffer;
        {{ var_name }}->{{ field.name }}.data[0] = '\0';
        {{ var_name }}->{{ field.name }}.size = 0;
        {{ var_name }}->{{ field.name }}.capacity = {{ field.name }}_buffer_size;
    } else {
        if ({{ offset_name }} + {{ field.name }}_len_with_null > buffer_size) {
            return 0;
        }
        if ({{ field.name }}_buffer_size < {{ field.name }}_len_with_null) {
            return 0;
        }
        
        for (size_t i = 0; i < {{ field.name }}_len_with_null - 1; ++i) {
            {{ field.name }}_buffer[i] = {{ buffer_name }}[{{ offset_name }} + i];
        }
        {{ field.name }}_buffer[{{ field.name }}_len_with_null - 1] = '\0';
        
        {{ var_name }}->{{ field.name }}.data = {{ field.name }}_buffer;
        {{ var_name }}->{{ field.name }}.size = {{ field.name }}_len_with_null - 1;
        {{ var_name }}->{{ field.name }}.capacity = {{ field.name }}_buffer_size;
        {{ offset_name }} += {{ field.name }}_len_with_null;
    }
{%- elif field.is_dynamic_array %}
    // Dynamic array field: {{ field.name }}
    if ({{ offset_name }} + sizeof(uint32_t) > buffer_size) {
        return 0;
    }
    
    const uint32_t {{ field.name }}_size = deserialize_u32_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += sizeof(uint32_t);
    
    if ({{ field.name }}_size > {{ field.name }}_capacity) {
        return 0;
    }
    
    {{ var_name }}->{{ field.name }}.size = {{ field.name }}_size;
    {{ var_name }}->{{ field.name }}.capacity = {{ field.name }}_capacity;
    
    for (uint32_t i = 0; i < {{ field.name }}_size; ++i) {
        {%- if field.type in ['uint8_t', 'int8_t', 'char', 'bool'] %}
        if ({{ offset_name }} + 1 > buffer_size) return 0;
        {{ var_name }}->{{ field.name }}.data[i] = {{ buffer_name }}[{{ offset_name }}];
        {{ offset_name }} += 1;
        {%- elif field.type in ['uint16_t', 'int16_t'] %}
        if ({{ offset_name }} + 2 > buffer_size) return 0;
        {{ var_name }}->{{ field.name }}.data[i] = deserialize_u16_be({{ buffer_name }} + {{ offset_name }});
        {{ offset_name }} += 2;
        {%- elif field.type in ['uint32_t', 'int32_t', 'float'] %}
        if ({{ offset_name }} + 4 > buffer_size) return 0;
        *(uint32_t*)&{{ var_name }}->{{ field.name }}.data[i] = deserialize_u32_be({{ buffer_name }} + {{ offset_name }});
        {{ offset_name }} += 4;
        {%- elif field.type in ['uint64_t', 'int64_t', 'double'] %}
        if ({{ offset_name }} + 8 > buffer_size) return 0;
        *(uint64_t*)&{{ var_name }}->{{ field.name }}.data[i] = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
        {{ offset_name }} += 8;
        {%- endif %}
    }
{%- elif field.is_array %}
    // Fixed array field: {{ field.name }}
    {%- if field.type in ['uint8_t', 'int8_t', 'char', 'bool'] %}
    if ({{ offset_name }} + {{ field.array_size }} > buffer_size) return 0;
    for (int i = 0; i < {{ field.array_size }}; ++i) {
        {{ var_name }}->{{ field.name }}[i] = {{ buffer_name }}[{{ offset_name }}];
        {{ offset_name }} += 1;
    }
    {%- elif field.type in ['uint16_t', 'int16_t'] %}
    if ({{ offset_name }} + {{ field.array_size * 2 }} > buffer_size) return 0;
    for (int i = 0; i < {{ field.array_size }}; ++i) {
        {{ var_name }}->{{ field.name }}[i] = deserialize_u16_be({{ buffer_name }} + {{ offset_name }});
        {{ offset_name }} += 2;
    }
    {%- elif field.type in ['uint32_t', 'int32_t', 'float'] %}
    if ({{ offset_name }} + {{ field.array_size * 4 }} > buffer_size) return 0;
    for (int i = 0; i < {{ field.array_size }}; ++i) {
        *(uint32_t*)&{{ var_name }}->{{ field.name }}[i] = deserialize_u32_be({{ buffer_name }} + {{ offset_name }});
        {{ offset_name }} += 4;
    }
    {%- elif field.type in ['uint64_t', 'int64_t', 'double'] %}
    if ({{ offset_name }} + {{ field.array_size * 8 }} > buffer_size) return 0;
    for (int i = 0; i < {{ field.array_size }}; ++i) {
        *(uint64_t*)&{{ var_name }}->{{ field.name }}[i] = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
        {{ offset_name }} += 8;
    }
    {%- endif %}
{%- else %}
    // Scalar field: {{ field.name }}
    {%- if field.type in ['uint8_t', 'int8_t', 'char', 'bool'] %}
    if ({{ offset_name }} + 1 > buffer_size) return 0;
    {{ var_name }}->{{ field.name }} = {{ buffer_name }}[{{ offset_name }}];
    {{ offset_name }} += 1;
    {%- elif field.type in ['uint16_t', 'int16_t'] %}
    if ({{ offset_name }} + 2 > buffer_size) return 0;
    {{ var_name }}->{{ field.name }} = deserialize_u16_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 2;
    {%- elif field.type in ['uint32_t', 'int32_t', 'float'] %}
    if ({{ offset_name }} + 4 > buffer_size) return 0;
    *(uint32_t*)&{{ var_name }}->{{ field.name }} = deserialize_u32_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 4;
    {%- elif field.type in ['uint64_t', 'int64_t', 'double'] %}
    if ({{ offset_name }} + 8 > buffer_size) return 0;
    *(uint64_t*)&{{ var_name }}->{{ field.name }} = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    {%- elif field.type == 'geometry_msgs__msg__Vector3' %}
    // Vector3 field: {{ field.name }}
    if ({{ offset_name }} + 24 > buffer_size) return 0;  // 3 * 8 bytes for doubles
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.x = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.y = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.z = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    {%- elif field.type == 'geometry_msgs__msg__Point' %}
    // Point field: {{ field.name }}
    if ({{ offset_name }} + 24 > buffer_size) return 0;  // 3 * 8 bytes for doubles
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.x = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.y = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.z = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    {%- elif field.type == 'geometry_msgs__msg__Quaternion' %}
    // Quaternion field: {{ field.name }}
    if ({{ offset_name }} + 32 > buffer_size) return 0;  // 4 * 8 bytes for doubles
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.x = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.y = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.z = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.w = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    {%- elif field.type == 'geometry_msgs__msg__Pose' %}
    // Pose field: {{ field.name }}
    // Position (Point)
    if ({{ offset_name }} + 24 > buffer_size) return 0;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.position.x = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.position.y = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.position.z = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    // Orientation (Quaternion)
    if ({{ offset_name }} + 32 > buffer_size) return 0;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.orientation.x = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.orientation.y = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.orientation.z = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.orientation.w = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    {%- elif field.type == 'geometry_msgs__msg__PoseWithCovariance' %}
    // PoseWithCovariance field: {{ field.name }}
    // Pose
    if ({{ offset_name }} + 56 > buffer_size) return 0;  // 7 * 8 bytes for pose
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.pose.position.x = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.pose.position.y = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.pose.position.z = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.pose.orientation.x = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.pose.orientation.y = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.pose.orientation.z = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    *(uint64_t*)&{{ var_name }}->{{ field.name }}.pose.orientation.w = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 8;
    // Covariance array (36 doubles)
    if ({{ offset_name }} + 288 > buffer_size) return 0;  // 36 * 8 bytes for covariance
    for (int i = 0; i < 36; ++i) {
        *(uint64_t*)&{{ var_name }}->{{ field.name }}.covariance[i] = deserialize_u64_be({{ buffer_name }} + {{ offset_name }});
        {{ offset_name }} += 8;
    }
    {%- elif field.type == 'builtin_interfaces__msg__Time' %}
    // Time field: {{ field.name }}
    if ({{ offset_name }} + 8 > buffer_size) return 0;  // 4 + 4 bytes for time
    {{ var_name }}->{{ field.name }}.sec = (int32_t)deserialize_u32_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 4;
    {{ var_name }}->{{ field.name }}.nanosec = deserialize_u32_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 4;
    {%- elif field.type == 'std_msgs__msg__Header' %}
    // Header field: {{ field.name }}
    // Time stamp
    if ({{ offset_name }} + 8 > buffer_size) return 0;
    {{ var_name }}->{{ field.name }}.stamp.sec = (int32_t)deserialize_u32_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 4;
    {{ var_name }}->{{ field.name }}.stamp.nanosec = deserialize_u32_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += 4;
    // Frame ID (string)
    if ({{ offset_name }} + sizeof(uint32_t) > buffer_size) {
        return 0;
    }
    const uint32_t {{ field.name }}_frame_id_len_with_null = deserialize_u32_be({{ buffer_name }} + {{ offset_name }});
    {{ offset_name }} += sizeof(uint32_t);
    if ({{ field.name }}_frame_id_len_with_null == 0) {
        {{ var_name }}->{{ field.name }}.frame_id.data = {{ field.name }}_frame_id_buffer;
        {{ var_name }}->{{ field.name }}.frame_id.data[0] = '\0';
        {{ var_name }}->{{ field.name }}.frame_id.size = 0;
        {{ var_name }}->{{ field.name }}.frame_id.capacity = {{ field.name }}_frame_id_buffer_size;
    } else {
        if ({{ offset_name }} + {{ field.name }}_frame_id_len_with_null > buffer_size) {
            return 0;
        }
        if ({{ field.name }}_frame_id_buffer_size < {{ field.name }}_frame_id_len_with_null) {
            return 0;
        }
        for (size_t i = 0; i < {{ field.name }}_frame_id_len_with_null - 1; ++i) {
            {{ field.name }}_frame_id_buffer[i] = {{ buffer_name }}[{{ offset_name }} + i];
        }
        {{ field.name }}_frame_id_buffer[{{ field.name }}_frame_id_len_with_null - 1] = '\0';
        {{ var_name }}->{{ field.name }}.frame_id.data = {{ field.name }}_frame_id_buffer;
        {{ var_name }}->{{ field.name }}.frame_id.size = {{ field.name }}_frame_id_len_with_null - 1;
        {{ var_name }}->{{ field.name }}.frame_id.capacity = {{ field.name }}_frame_id_buffer_size;
        {{ offset_name }} += {{ field.name }}_frame_id_len_with_null;
    }
    {%- else %}
    // Unknown type: {{ field.type }}
    #error "Unsupported field type: {{ field.type }}"
    {%- endif %}
{%- endif %}
{%- endmacro %}

size_t deserialize_{{ message.name.lower() }}_big_endian(const uint8_t* buffer, size_t buffer_size, {{ message.package }}__msg__{{ message.name }}* msg
{%- for field in message.fields %}
{%- if field.is_string %}
    , char* {{ field.name }}_buffer, size_t {{ field.name }}_buffer_size
{%- elif field.is_dynamic_array %}
    , {{ field.type }}* {{ field.name }}_data, size_t {{ field.name }}_capacity
{%- elif field.type == 'std_msgs__msg__Header' %}
    , char* {{ field.name }}_frame_id_buffer, size_t {{ field.name }}_frame_id_buffer_size
{%- endif %}
{%- endfor %}
)
{
    if (buffer == NULL || msg == NULL) {
        return 0;
    }
    
    size_t offset = 0;
    
{%- for field in message.fields %}
{%- if field.is_dynamic_array %}
    msg->{{ field.name }}.data = {{ field.name }}_data;
{%- endif %}
{%- endfor %}
    
{%- for field in message.fields %}
    {{ deserialize_field(field, "msg", "buffer", "offset") }}
{%- endfor %}
    
    return offset;
}

#endif // DESERIALIZE_{{ message.name.upper() }}_H_